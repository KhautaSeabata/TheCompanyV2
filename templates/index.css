<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Deriv Volatility Indices - 1 Min Candlestick</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #1a202c;
            color: #e2e8f0;
        }
        .chart-container {
            width: 100%;
            height: 400px;
            background-color: #2d3748;
            border-radius: 0.5rem;
            overflow: hidden;
        }
        .chart-title {
            font-weight: 600;
            margin-bottom: 0.5rem;
            color: #cbd5e0;
        }
        .tab-button {
            padding: 0.75rem 1.5rem;
            border-radius: 0.5rem;
            font-weight: 500;
            transition: all 0.2s ease-in-out;
            cursor: pointer;
            background-color: #4a5568;
            color: #e2e8f0;
            border: 1px solid transparent;
        }
        .tab-button.active {
            background-color: #63b3ed;
            color: #1a202c;
            border-color: #63b3ed;
        }
        .tab-button:hover:not(.active) {
            background-color: #5a6578;
        }
        .alert-item {
            background-color: #2d3748;
            border-left: 4px solid;
            border-color: #4CAF50; /* Green for BUY, will adjust for SELL */
            padding: 1rem;
            margin-bottom: 0.5rem;
            border-radius: 0.25rem;
        }
        .alert-item.sell {
            border-color: #EF5350; /* Red for SELL */
        }
        .grid-cols-1-md-2 {
            grid-template-columns: repeat(1, minmax(0, 1fr));
        }
        @media (min-width: 768px) {
            .grid-cols-1-md-2 {
                grid-template-columns: repeat(2, minmax(0, 1fr));
            }
        }
    </style>
</head>
<body class="p-4 md:p-8">
    <h1 class="text-3xl md:text-4xl font-bold text-center mb-8 text-blue-400">Deriv Volatility Indices - 1 Min Candlestick</h1>

    <!-- Symbol Tabs -->
    <div class="flex flex-wrap justify-center gap-2 mb-8" id="symbol-tabs"></div>

    <!-- Chart and Alerts -->
    <div class="grid grid-cols-1-md-2 gap-6">
        <!-- Chart Container -->
        <div>
            <h3 class="chart-title text-center text-lg" id="chart-title"></h3>
            <div id="chart" class="chart-container"></div>
        </div>
        <!-- Alerts Container -->
        <div>
            <h3 class="chart-title text-center text-lg">Trading Alerts</h3>
            <div id="alerts" class="space-y-2"></div>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.0.0/socket.io.min.js"></script>
    <script src="https://unpkg.com/lightweight-charts/dist/lightweight-charts.umd.production.js"></script>

    <script>
        const SYMBOLS = ["R_100", "R_75", "R_50", "R_25"];
        const INTERVAL = '60'; // 1-minute candles

        let activeSymbol = SYMBOLS[0];
        let chart, candlestickSeries;

        // Initialize Socket.IO
        const socket = io();

        // Create chart
        function createChart() {
            const container = document.getElementById('chart');
            chart = LightweightCharts.createChart(container, {
                width: container.clientWidth,
                height: container.clientHeight,
                layout: {
                    backgroundColor: '#2d3748',
                    textColor: '#cbd5e0',
                },
                grid: {
                    vertLines: { color: '#4a5568' },
                    horzLines: { color: '#4a5568' },
                },
                timeScale: {
                    timeVisible: true,
                    secondsVisible: true,
                    borderColor: '#4a5568',
                },
                priceScale: {
                    borderColor: '#4a5568',
                },
                crosshair: {
                    mode: LightweightCharts.CrosshairMode.Normal,
                },
            });

            candlestickSeries = chart.addCandlestickSeries({
                upColor: '#4CAF50',
                downColor: '#EF5350',
                borderVisible: false,
                wickVisible: true,
                wickUpColor: '#4CAF50',
                wickDownColor: '#EF5350',
            });

            new ResizeObserver(entries => {
                entries.forEach(entry => {
                    chart.applyOptions({ width: entry.contentRect.width, height: entry.contentRect.height });
                });
            }).observe(container);

            console.log(`Chart created for ${activeSymbol}_${INTERVAL}`);
        }

        // Update chart data
        function updateChart(data) {
            if (candlestickSeries) {
                candlestickSeries.update(data);
                console.log(`Updated chart with data:`, data);
            }
        }

        // Set initial chart data
        function setInitialChartData(data) {
            if (candlestickSeries && data && data.length > 0) {
                candlestickSeries.setData(data);
                console.log(`Set initial data: ${data.length} candles`);
            }
        }

        // Generate symbol tabs
        function generateSymbolTabs() {
            const tabContainer = document.getElementById('symbol-tabs');
            tabContainer.innerHTML = '';
            SYMBOLS.forEach(symbol => {
                const button = document.createElement('button');
                button.className = `tab-button ${symbol === activeSymbol ? 'active' : ''}`;
                button.textContent = symbol.replace('R_', 'Volatility ');
                button.onclick = () => switchSymbol(symbol);
                tabContainer.appendChild(button);
            });
        }

        // Handle alerts
        function addAlert(alert) {
            const alertsContainer = document.getElementById('alerts');
            const alertDiv = document.createElement('div');
            alertDiv.className = `alert-item ${alert.direction.toLowerCase()}`;
            alertDiv.innerHTML = `
                <p><strong>${alert.type}</strong> (${alert.direction})</p>
                <p>Price: ${alert.price.toFixed(5)}</p>
                <p>Confidence: ${(alert.confidence * 100).toFixed(1)}%</p>
                <p>${alert.description}</p>
                <p class="text-sm text-gray-400">Expires: ${new Date(alert.expiry).toLocaleString()}</p>
            `;
            alertsContainer.prepend(alertDiv); // Add new alerts at the top
            // Limit to 10 alerts
            while (alertsContainer.children.length > 10) {
                alertsContainer.removeChild(alertsContainer.lastChild);
            }
        }

        // Switch symbol
        function switchSymbol(symbol) {
            if (activeSymbol === symbol) return;
            console.log(`Switching to symbol: ${symbol}`);
            document.querySelectorAll('.tab-button').forEach(button => {
                button.classList.toggle('active', button.textContent.includes(symbol.replace('R_', '')));
            });
            if (chart) {
                chart.remove();
            }
            activeSymbol = symbol;
            document.getElementById('chart-title').textContent = `${activeSymbol.replace('R_', 'Volatility ')} - 1 Min Candles`;
            createChart();
            socket.emit('request_initial_data', { symbol: activeSymbol });
            document.getElementById('alerts').innerHTML = ''; // Clear alerts
        }

        // Socket.IO handlers
        socket.on('connect', () => {
            console.log('Connected to Flask Socket.IO');
        });

        socket.on('initial_candlestick_data', (msg) => {
            if (msg.symbol === activeSymbol && msg.interval.toString() === INTERVAL) {
                setInitialChartData(msg.data);
            }
        });

        socket.on('candlestick_update', (msg) => {
            if (msg.symbol === activeSymbol && msg.interval.toString() === INTERVAL) {
                updateChart(msg.data);
            }
        });

        socket.on('alert_update', (alert) => {
            if (alert.symbol === activeSymbol) {
                addAlert(alert);
            }
        });

        socket.on('disconnect', () => {
            console.log('Disconnected from Flask Socket.IO');
        });

        // Initial setup
        document.addEventListener('DOMContentLoaded', () => {
            console.log('DOM loaded, initializing UI...');
            generateSymbolTabs();
            document.getElementById('chart-title').textContent = `${activeSymbol.replace('R_', 'Volatility ')} - 1 Min Candles`;
            createChart();
        });
    </script>
</body>
</html>
